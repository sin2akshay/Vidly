using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using AutoMapper;
using Vidly.Dtos;
using Vidly.Models;

namespace Vidly.Controllers.Api
{
	public class MoviesController : ApiController
	{
		//To get movies from the Database
		private ApplicationDbContext _context;

		public MoviesController()
		{
			_context = new ApplicationDbContext();
		}

		// GET /api/movies
		public IHttpActionResult GetMovies()
		{
			return Ok(_context.Movies.ToList().Select(Mapper.Map<Movie, MovieDto>));
		}

		// GET /api/movies/1
		public IHttpActionResult GetMovie(int id)
		{
			var movie = _context.Movies.SingleOrDefault(m => m.Id == id);

			if (movie == null)
			{
				return NotFound();
			}

			return Ok(Mapper.Map<Movie, MovieDto>(movie));
		}

		// POST /api/movies
		[HttpPost]
		public IHttpActionResult CreateMovie(MovieDto movieDto)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest();
			}

			var movie = Mapper.Map<MovieDto, Movie>(movieDto);

			_context.Movies.Add(movie);
			_context.SaveChanges();

			//This added movie has an Id generated by the Database
			//so we add this to our Dto and return to our client
			movieDto.Id = movie.Id;

			//As per RESTful convention, we have to return the URI of the newly created resource
			//As sencond parameter we need to return the actual object that was created
			return Created(new Uri(Request.RequestUri + "/" + movie.Id), movieDto);
		}

		// PUT /api/movies/1
		[HttpPost]
		public IHttpActionResult UpdateMovie(int id, MovieDto movieDto)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest();
			}

			var movieInDb = _context.Movies.SingleOrDefault(m => m.Id == id);

			if (movieInDb == null)
			{
				return NotFound();
			}

			Mapper.Map(movieDto, movieInDb);
			_context.SaveChanges();

			return Ok();
		}

		// DELETE /api/movies/1
		[HttpDelete]
		public IHttpActionResult DeleteMovie(int id)
		{
			var movieInDb = _context.Movies.SingleOrDefault(m => m.Id == id);

			if (movieInDb == null)
			{
				return NotFound();
			}

			_context.Movies.Remove(movieInDb);
			_context.SaveChanges();

			return Ok();
		}
	}
}